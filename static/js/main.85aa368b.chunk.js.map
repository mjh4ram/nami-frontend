{"version":3,"sources":["classes/socketclass.js","classes/userstore.js","components/Landing/Particles.js","components/Landing/LandingPage.js","components/Footer.js","classes/axiosApi.js","components/LogIn/SignUp.js","components/LogIn/SignIn.js","components/LogIn/LogIn.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","socket","allChats","context","step","loading","token","WebSocket","onopen","e","console","log","onmessage","newChats","data","JSON","parse","push","msg","sessionStorage","setItem","stringify","onerror","messasge","onclose","isLoggedIn","username","Particle","params","color","opacity","Landingpage","class","FooterSec","size","type","logo","href","axiosInstance","axios","create","baseURL","timeout","headers","getItem","interceptors","response","use","error","originalRequest","config","status","statusText","refresh_token","post","refresh","then","access","defaults","catch","err","Promise","reject","SignUp","useState","signupDialog","openDialog","setUsername","password1","setPassword1","password2","setPassword2","setError","signUp","a","password","stack","onClick","open","placeholder","onChange","target","value","required","SignIn","loginDialog","setPassword","logIn","UserStore","Socket","socketConnect","colored","raised","ripple","observer","clear","close","App","useEffect","title","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.85aa368b.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\n\nclass Socket {\n  constructor() {\n    extendObservable(this, {\n      socket: null,\n      allChats: [],\n      // chatting의 context\n      context: -1,\n      // chatting의 step\n      step: 0,\n      loading: false\n    })\n  }\n\n\n  socketConnect(token) {\n    this.socket = new WebSocket('ws://localhost:8000/ws/chat/?token=' + token);\n    this.socket.onopen = e => {\n      console.log(\"websocket connected!\");\n    }\n    //called when message is received from the django backend server\n    this.socket.onmessage = e => {\n      const newChats = [...this.allChats];\n      const data = JSON.parse(e.data);\n      newChats.push({ \"from\": \"TinkerBell\", \"msg\": data.msg });\n      this.allChats = newChats;\n      //sessionstorage에 allChats를 추가\n      sessionStorage.setItem(\"chats\", JSON.stringify(this.allChats));\n      //spinner를 종료시킴\n      this.loading = false; \n      // check if the context of message is same as prev context\n      if ((this.context == data.context || data.context == 1 || data.context == 2) && data.context != 0) {\n        this.step = this.step + 1;\n      } else {\n        this.step = 1;\n        this.context = data.context;\n      }\n    }\n    this.socket.onerror = e => {\n      console.log(e.messasge);\n    }\n    this.socket.onclose = e => {\n      console.log(\"websocket closed!\");\n      //this.socketConnect();\n    }\n  }\n}\n\n\nexport default new Socket();\n","import { extendObservable } from 'mobx';\n\nclass UserStore {\n  constructor() {\n    extendObservable(this, {\n      isLoggedIn: '',\n      username: ''\n    })\n  }\n}\n\nexport default new UserStore();\n","import React from \"react\";\nimport Particles from 'react-particles-js';\n\nfunction Particle() {\n  return (\n    <Particles\n      params={{\n        \"particles\": {\n            \"number\": {\n                \"value\": 140\n            },\n            \"size\": {\n                \"value\": 2\n            },\n            \"color\": {\n                \"value\": \"black\"\n            },\n            \"move\": {\n  \t            \"speed\": 0.2\n  \t        },\n            \"line_linked\": {\n                color: \"#474343\",\n                opacity: 0.1\n            }\n        },\n      }}\n    />\n  );\n}\n\nexport default Particle;\n","import React from \"react\";\nimport Particle from \"./Particles\";\nimport \"../../css/landingpage.css\";\n\nfunction Landingpage() {\n  return (\n    <div class=\"lp\">\n      <Particle/>\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"left\">\n            <div class=\"landing-page-title\">Stay ahead of the game</div>\n            <div class=\"landing-page-title page-title2\">Just like institutional investors</div>\n            <p class=\"landing-page-p\">On-Chain Data and Intelligence Platform</p>\n            <div class=\"viewcharts-buffer\"><button>View Charts</button></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Landingpage;\n","import React from 'react';\nimport '../css/footer.css';\nimport {Footer, FooterSection, FooterLinkList} from 'react-mdl';\n\nfunction FooterSec() {\n    return (\n        <Footer size=\"mini\">\n            <FooterSection type=\"left\" logo=\"nami\">\n                <FooterLinkList>\n                    <a href=\"#\">Help</a>\n                    <a href=\"#\">Privacy & Terms</a>\n                    <a href=\"#\">Copyright © 2020 Jae Hyun Moon All rights reserved</a>\n                </FooterLinkList>\n            </FooterSection>\n        </Footer>\n    )\n}\n\nexport default FooterSec;\n","import axios from 'axios'\n\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:8000/api/',\n    timeout: 5000,\n    headers: {\n        'Authorization': \"JWT \" + sessionStorage.getItem('access_token'),\n        'Content-Type': 'application/json',\n        'accept': 'application/json'\n    }\n});\n\n// django에서 나온값이 401일경우 refresh 시켜준다\naxiosInstance.interceptors.response.use(\n    response => response,\n    error => {\n      const originalRequest = error.config;\n\n      if (error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n          const refresh_token = sessionStorage.getItem('refresh_token');\n\n          return axiosInstance\n              .post('/token/refresh/', {refresh: refresh_token})\n              .then((response) => {\n\n                  sessionStorage.setItem('access_token', response.data.access);\n                  sessionStorage.setItem('refresh_token', response.data.refresh);\n\n                  axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n                  originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n\n                  return axiosInstance(originalRequest);\n              })\n              .catch(err => {\n                  console.log(err)\n              });\n      }\n      return Promise.reject(error);\n  }\n);\nexport default axiosInstance\n","import React, { useState } from 'react';\nimport axiosInstance from \"../../classes/axiosApi\";\nimport Socket from '../../classes/socketclass';\nimport UserStore from '../../classes/userstore';\nimport {Dialog, DialogTitle, DialogContent, DialogActions, Button} from 'react-mdl';\n\nfunction SignUp() {\n  const [signupDialog, openDialog] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password1, setPassword1] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const signUp = async() => {\n      if (password1 !== password2) {\n          setError(true);\n          return;\n      }\n      try {\n          const response = await axiosInstance.post('/user/create/', {\n              username: username,\n              password: password1\n          });\n          openDialog(false);\n          return response;\n      } catch (error) {\n           console.log(error.stack);\n      }\n  }\n\n  return (\n    <div class=\"signup\">\n      <Button type='button' onClick={() => openDialog(true)}>회원가입</Button>\n      <Dialog open={signupDialog}>\n        <DialogTitle>회원가입</DialogTitle>\n        <DialogContent>\n          <form>\n            <input type=\"text\" placeholder=\"Enter Username\" onChange={(e) => setUsername(e.target.value)} required/>\n            <input type=\"password\" placeholder=\"Enter Password\" onChange={(e) => setPassword1(e.target.value)} required/>\n            <input type=\"password\" placeholder=\"Retype Password\" onChange={(e) => setPassword2(e.target.value)} required/>\n            {error ? (\n              <div class=\"error\">입력값이 올바르지 않습니다</div>\n            ) : (\n              <div></div>\n            )}\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button type='button' onClick={() => signUp()}>회원가입</Button>\n          <Button type='button' onClick={() => openDialog(false)}>닫기</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default SignUp;\n","import React, { useState } from 'react';\nimport axiosInstance from \"../../classes/axiosApi\";\nimport Socket from '../../classes/socketclass';\nimport UserStore from '../../classes/userstore';\nimport SignUp from './SignUp';\nimport {Dialog, DialogTitle, DialogContent, DialogActions, Button} from 'react-mdl';\n\nfunction SignIn() {\n  const [loginDialog, openDialog] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const logIn = async() => {\n      try {\n          const data = await axiosInstance.post('/token/obtain/', {\n              username: username,\n              password: password\n          });\n          axiosInstance.defaults.headers['Authorization'] = \"JWT \" + data.data.access;\n          sessionStorage.setItem('access_token', data.data.access);\n          sessionStorage.setItem('refresh_token', data.data.refresh);\n          sessionStorage.setItem('username', username);\n          UserStore.isLoggedIn = true;\n          UserStore.username = username;\n          Socket.socketConnect(data.data.access);\n          openDialog(false);\n      } catch (error) {\n          throw error;\n      }\n  }\n\n\n  return (\n    <div>\n      <Button colored onClick={() => openDialog(true)} raised ripple>Log In</Button>\n      <Dialog open={loginDialog}>\n        <DialogTitle>LogIn</DialogTitle>\n        <DialogContent>\n          <form>\n            <input type=\"text\" placeholder=\"Enter Username\" onChange={(e) => setUsername(e.target.value)} required/>\n            <input type=\"password\" placeholder=\"Enter Password\" onChange={(e) => setPassword(e.target.value)} required/>\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <SignUp/>\n          <Button type='button' onClick={() => openDialog(false)}>닫기</Button>\n          <Button type='button' onClick={() => logIn()}>로그인</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default SignIn;\n","import React, { useState } from \"react\";\nimport axiosInstance from \"../../classes/axiosApi\";\nimport Socket from '../../classes/socketclass';\nimport UserStore from '../../classes/userstore';\nimport SignIn from './SignIn';\nimport {Button, Dialog, DialogTitle, DialogContent, DialogActions} from 'react-mdl';\nimport { observer } from 'mobx-react-lite';\n\n\nconst Login = observer(() => {\n\n    function logOut() {\n      UserStore.isLoggedIn = false;\n      UserStore.username = null;\n      sessionStorage.clear();\n      Socket.socket.close();\n    }\n\n    return (\n      <div>\n        {\n          UserStore.isLoggedIn ? (\n            <div>\n              <div class=\"username_login\">{UserStore.username}님 환영합니다</div>\n              <Button colored onClick={() => logOut()} raised ripple>\n                로그아웃\n              </Button>\n            </div>\n          ) : (\n            <SignIn/>\n          )\n        }\n      </div>\n    );\n});\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\nimport Socket from './classes/socketclass';\nimport UserStore from './classes/userstore';\nimport Landingpage from './components/Landing/LandingPage';\nimport About from './components/About/About';\nimport FooterSec from './components/Footer';\nimport Login from './components/LogIn/LogIn';\n\n\nfunction App() {\n\n  useEffect(() =>{\n    // app마운트시 실행\n    if (sessionStorage.getItem('access_token') && sessionStorage.getItem('username')) {\n      Socket.socketConnect(sessionStorage.getItem('access_token'));\n      if (sessionStorage.getItem('chats')) {\n        Socket.allChats = JSON.parse(sessionStorage.getItem('chats'));\n      }\n      UserStore.username = sessionStorage.getItem('username');\n      UserStore.isLoggedIn = true;\n    }\n\n    // unmount될시 socket을 닫아준다\n    return () => {\n      console.log(\"websocket disconnected\");\n      Socket.socket.close();\n    }\n  },[]);\n\n  return (\n    <div>\n        <Layout>\n            <Header title={<div class=\"logo-name\">nami</div>}>\n                <Navigation>\n                    <a href=\"#\">Home</a>\n                    <a href=\"#\">Chart</a>\n                    <a href=\"#\">Contact</a>\n                    <p>\n                      <button class=\"loginbutton\">Log in</button>\n                    </p>\n                </Navigation>\n            </Header>\n            <Drawer title=\"Title\">\n                <Navigation>\n                    <a href=\"#\">Link</a>\n                    <a href=\"#\">Link</a>\n                    <a href=\"#\">Link</a>\n                    <a href=\"#\">Link</a>\n                </Navigation>\n            </Drawer>\n            <Content>\n              <Landingpage/>\n              <FooterSec/>\n            </Content>\n        </Layout>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}